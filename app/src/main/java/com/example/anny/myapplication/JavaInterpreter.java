/* Generated By:JavaCC: Do not edit this line. JavaInterpreter.java */
// =================================
//        IMPORTS
// =================================

package com.example.anny.myapplication;

import java.lang.*;
import java.util.*;
import java.lang.reflect.*;
import java.io.*;
import android.util.Log;
import org.apache.commons.lang3.reflect.*;

public class JavaInterpreter implements JavaInterpreterConstants {

  // =================================
  //        INNER CLASSES
  // =================================
  public static class Value{
    public Class<?> clazz;
    public Object value;
    public boolean isArray;
    public boolean isClass;

    public Value(Class<?> clazz, Object value){
      this.clazz = clazz;
      this.value = value;
      this.isArray = clazz.isArray();
      this.isClass = value == null;
    }

    public String toString(){
      return "class: " + clazz.toString() + ", value: " + (value != null ? value.toString() : "null");
    }
  }

  static class MethodClass{
    public String methodName;
    public List<Value> params;

    public MethodClass(String methodName, List<Value> params){
      this.methodName = methodName;
      this.params = params;
    }
  }

  static class Invoke{
    public String field;
    public MethodClass method;

    public Invoke(MethodClass m, String f){
      field = f;
      method = m;
    }
  }

  // =================================
  //        CLASS VARIABLES
  // =================================
  public static Map<String,Value> variables = new HashMap<String,Value>();
  public static JavaInterpreter parser;
  public static String mypackage;
  public static List<String> packages;

  // =================================
  //              MAIN
  // =================================
  public static void initialize(Object thisObj, String packagename){
    Value thisVal = new Value(thisObj.getClass(), thisObj);
    mypackage = packagename;
    packages = Arrays.asList(
              mypackage + ".",
              "java.lang.",
              "java.util.",
              "android.widget.",
              "android.util.",
              "android.app.",
              "android.view.",
              "android.content.",
              "android.os."
      );
    variables.put("this", thisVal);
    InputStream targetStream = new ByteArrayInputStream("".getBytes());
    parser = new JavaInterpreter(targetStream );
  }

  public static void parseFunc(String s) throws ParseException {

    InputStream targetStream = new ByteArrayInputStream(s.getBytes());
    parser.ReInit(targetStream);
    parser.Body();
  }

  // =================================
  //        HELPER FUNCTIONS
  // =================================
  public static boolean doesVarExist(String var_name){
    return variables.containsKey(var_name);
  }

  public static Object getNewInstance(final Class<?> clazz, List<Value> constructorParameters) throws ParseException{
    Class<?> [] parameterTypes = new Class[constructorParameters.size()];
    Object [] parameters = new Object[constructorParameters.size()];
    for(int i =  0; i < constructorParameters.size(); i++) {
        parameterTypes[constructorParameters.size() - i - 1] = constructorParameters.get(i).clazz;
        parameters[constructorParameters.size() - i - 1] = constructorParameters.get(i).value;
    }
    try{
        //Constructor constructor = clazz.getConstructor(parameterTypes);
        //return constructor.newInstance(parameters);
        return ConstructorUtils.invokeConstructor(clazz, parameters);

    }
    catch(Exception e){
        throw new ParseException("failed to create instance: " + e.getCause());
    }
  }

  public static Value invokeStaticMethod(final Class<?> clazz, MethodClass m, Object o) throws ParseException{
    List<Value> methodParameters = m.params;
    Class<?> [] parameterTypes = new Class[methodParameters.size()];
    Object [] parameters = new Object[methodParameters.size()];
    for(int i =  0; i < methodParameters.size(); i++) {
        parameterTypes[methodParameters.size() - i - 1] = methodParameters.get(i).clazz;
        parameters[methodParameters.size() - i - 1] = methodParameters.get(i).value;
        System.out.println("debug param : " + parameters[methodParameters.size() - i - 1]);
        System.out.println("debug type : " + parameterTypes[methodParameters.size() - i - 1]);
    }
    try{
      Object res = null;
      if (o == null) {
          res = MethodUtils.invokeStaticMethod(clazz, m.methodName, parameters);
      }
      else {
          res = MethodUtils.invokeMethod(o, m.methodName, parameters);
      }
      if (res == null){
        return null;
      }
      return new Value(res.getClass(), res);
    }
    catch(Exception e){
        if(e == null || e.getMessage() == null){
            return null;
        }
        Log.d("fetch","var "  + o);
        Log.d("fetch","method "  + m.methodName);
        for (Object p : parameters){
          Log.d("fetch","param value: " + p +" "+ p.getClass().getSimpleName());
        }
        Log.d("fetch"," value of color : "+String.valueOf(MainActivity.mContext.getResources().getColor(R.color.colorAccent)));
        Log.d("fetch",  clazz.getSimpleName());
        for(Method meth : clazz.getMethods()){
            if(meth.getName().equals(m.methodName)){
                Log.d("fetch","============expected params:=============");
                for(Class<?> paramType : meth.getParameterTypes()){
                    Log.d("fetch",paramType.getSimpleName());
                }
                throw new ParseException("failed to invoke method: "+m.methodName+" on "+clazz.getSimpleName()+" \u005cn Wrong parameters");
            }
        }
        throw new ParseException("failed to invoke method: " + m.methodName+" on "+clazz.getSimpleName()+" \u005cn No such method found");
    }
  }

  public static Class<?> checkClass(Token className) throws ParseException{
    Log.d("fetch","searching for class name "+className);
    for (String pkg : packages){
      Log.d("fetch", " checking pck "+pkg);
      Class<?> clazz = classExists(pkg + className);
      if (clazz != null ){
        Log.d("fetch"," found class in pckg :"+pkg + clazz.getSimpleName());
        return clazz;
      }
    }
    throw new ParseException("Encountered '" + className + "' at column " + className.beginColumn + ". symbol doesnt exist");

  }

  static Class<?> classExists(String fullClassName) {
      try {
          return Class.forName(fullClassName);
      } catch (ClassNotFoundException e) {
          return null;
      }
  }

/** Top level production. */
  static final public void Body() throws ParseException {
    Statment();
    jj_consume_token(SC);
    if (jj_2_1(2)) {
      Body();
    } else {
      ;
    }
    jj_consume_token(0);
  }

  static final public String FieldInvoke() throws ParseException {
  Token name = null;
    name = jj_consume_token(NAME);
    {if (true) return name.image;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Invoke> ListInvokes() throws ParseException {
  Token f = null;
  MethodClass m = null;
  List<Invoke> l = null;
    jj_consume_token(DOT);
    if (jj_2_2(2)) {
      m = MethodInvoke();
    } else if (jj_2_3(2)) {
      f = jj_consume_token(NAME);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_4(2)) {
      l = ListInvokes();
    } else {
      ;
    }
    if (l == null){
      l = new ArrayList<Invoke>();
    }
    if (m != null){
      l.add(0, new Invoke(m, null));
    }
    else {
      l.add(0, new Invoke(null, f.image));
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodClass MethodInvoke() throws ParseException {
  List<Value> l = null;
  Token name = null;
    name = jj_consume_token(NAME);
    jj_consume_token(LPAREN);
    if (jj_2_5(2)) {
      l = ParamList();
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    if (l == null){
      l = new ArrayList<Value>();
    }
    MethodClass m = new MethodClass(name.image, l);
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

// List<MethodClass> InvocList():
// {
//   List<MethodClass> invocations = null;
//   List<Value> l = null;
//   Token name = null;
// }
// {
//   (name = <NAME> <LPAREN> (l = ParamList())? <RPAREN> (<DOT> invocations = InvocList())?)
//   {
//     if (l == null){
//       l = new ArrayList<Value>();
//     }
//     MethodClass m = new MethodClass(name.image, l);
//     if (invocations == null){
//       invocations = new ArrayList<MethodClass>();
//     }
//     invocations.add(0, m);
//     return invocations;
//   }
// }
  static final public List<Value> ParamList() throws ParseException {
  List<Value> l = null;
  Value v = null;
    v = Param();
    if (jj_2_6(2)) {
      jj_consume_token(COMMA);
      l = ParamList();
    } else {
      ;
    }
    if (l == null){
      l = new ArrayList<Value>();
    }
    l.add(v);
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public Value Param() throws ParseException {
  Value v = null;
    v = Exp();
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public void Statment() throws ParseException {
  Value v = null;
  Token var_name = null;
  Token assign = null;
    if (jj_2_7(2)) {
      var_name = jj_consume_token(NAME);
      jj_consume_token(ASSIGN);
    } else {
      ;
    }
    v = Exp();
    if (var_name != null){
      variables.put(var_name.image, v);
      //DEBUG
      System.out.println("all variables: " + variables.toString());
    }
  }

  static final public Value Exp() throws ParseException {
  Value v = null;
  List<Invoke> l = null;
    v = SimpleExp();
    if (jj_2_8(2)) {
      l = ListInvokes();
    } else {
      ;
    }
    if (l != null){
      for (Invoke i : l){
        if (i.method != null){
          v = invokeStaticMethod(v.clazz, i.method, v.value);
        }
        else {
          try{
            Field f = v.clazz.getField(i.field);
            v = new Value(f.getType(), f.get(v.value));
          }
          catch (Exception e){
            Class<?>[] inners = v.clazz.getDeclaredClasses();
            boolean flag = false;
            for (Class<?> inner : inners){
              if (inner.getSimpleName().equals(i.field)){
                v = new Value(inner, null);
                flag = true;
                break;
              }
            }
            if (!flag){
                {if (true) throw new ParseException("no such symbol: " + i.field);}
            }
          }
        }
      }
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public Value SimpleExp() throws ParseException {
  Token class_name = null;
  Token value = null;
  Value v = null;
  Class<?> clazz = null;
  List<Value> l = null;
  Token var_name = null;
  Token field = null;
  Token size_arr = null;
  MethodClass m = null;
  String f = null;
    if (jj_2_12(2)) {
      var_name = jj_consume_token(NAME);
    //case: variable or regular class


    try{
      Class<?> clazz1 = checkClass(var_name);
      v = new Value(clazz1, null);
    }
    catch(Exception e){
      if (doesVarExist(var_name.image)){
        v = variables.get(var_name.image);
      }
      else {
        {if (true) throw new ParseException("symbol " + var_name + " doesnt exist");}
      }
    }
    } else if (jj_2_13(2)) {
      jj_consume_token(NEW);
      class_name = jj_consume_token(NAME);
      if (jj_2_10(2)) {
        jj_consume_token(LPAREN);
        if (jj_2_9(2)) {
          l = ParamList();
        } else {
          ;
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_11(2)) {
        jj_consume_token(LARRAY);
        size_arr = jj_consume_token(INT_NUM);
        jj_consume_token(RARRAY);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    //get class:
    //case: regular class
    clazz = checkClass(class_name);

    if (clazz != null){
      //case: array
      if (size_arr != null){
        try{
          int size = Integer.parseInt(size_arr.image);
          if (size <= 0){
            {if (true) throw new ParseException("invalid size");}
          }
          Object arr = Array.newInstance(clazz, size);
          v = new Value(arr.getClass(), arr);
        }
        catch(NumberFormatException e){
          {if (true) throw new ParseException("invalid size");}
        }
      }
      //case: constructor
      else{
        if (l == null){
          try{
            Object val = clazz.newInstance();
            v = new Value(clazz, val);
            {if (true) return v;}
          }
          catch(Exception e){
            {if (true) throw new ParseException("Failed to call constructor");}
          }
        }
        try{
          Object val = getNewInstance(clazz, l);
          v = new Value(clazz, val);
        }
        catch(Exception e){
          {if (true) throw new ParseException("Failed to call constructor");}
        }
      }
    }
    } else if (jj_2_14(2)) {
      value = jj_consume_token(INT_NUM);
    v = new Value(int.class, Integer.valueOf(value.image));
    } else if (jj_2_15(2)) {
      value = jj_consume_token(DOUBLE_NUM);
    v = new Value(double.class, Double.valueOf(value.image));
    } else if (jj_2_16(2)) {
      value = jj_consume_token(STRING);
    v = new Value(String.class, value.image.substring(1,value.image.length()-1));
    } else if (jj_2_17(2)) {
      jj_consume_token(TRUE);
    v = new Value(boolean.class, Boolean.TRUE);
    } else if (jj_2_18(2)) {
      jj_consume_token(FALSE);
    v = new Value(boolean.class, Boolean.FALSE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_3R_3() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(DOUBLE_NUM)) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(SC)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(LARRAY)) return true;
    if (jj_scan_token(INT_NUM)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(INT_NUM)) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_6()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_8()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavaInterpreterTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[18];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaInterpreter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaInterpreter(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaInterpreter(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaInterpreter(JavaInterpreterTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
